openapi: 3.0.0

servers:
  - description: Debug environment
    url: http://localhost:20190/
  - description: Local Vagrant machine
    url: http://test.dans.knaw.nl
info:
  description: Public interface for depositing datasets in EASY.
  version: "1.0.0"
  title: Deposit API
  contact:
    email: "info@dans.knaw.nl"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "authentication"
  description: "Authentication of a user"
- name: "service"
  description: "Information about service status"
- name: "deposit"
  description: "Operations on a deposit"
- name: "file"
  description: "Operations on a file"

paths:

  /login:
    post:
      tags:
      - "authentication"
      summary: "Acquire a JSON web token for use in subsequent calls to the service"
      responses:
        200:
          description: "JWT"
        403:
          description: "Forbidden. Invalid credentials."
  /:
    get:
      tags:
      - "service"
      summary: "Returns a description of the service."
      responses:
        200:
          description: "description of the service"
          content:
            text/plain:
              schema:
                type: string
                description: a plain text, human readable description of the service
                example: "EASY Deposit API Service running (v1.0.0)"
        500:
          description: "Service is unavailable because of an error"

  /deposit:
    get:
      tags:
      - "deposit"
      summary: "Lists all deposits of the authenticated user."
      operationId: "getDeposits"
      responses:
        200:
          description: "List retrieved successfully.."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Deposit"
                description: a plain text, human readable description of the service
                example:

                - id: "93674123-1699-49c5-af91-ed31db19adc9"
                  title: "Current Dataset"
                  state: "DRAFT"
                  state_description: ""
                  date: "2018-01-20T10:40:52Z"

                - id: "a145a1be-5463-4b10-a621-a9e511ff7f20"
                  title: "First Dataset"
                  state: "IN_PROGRESS"
                  state_description: ""
                  date: "2017-12-01T11:10:22Z"

                - id: "1d946f5b-e53b-4f71-b1f3-7481475d07db"
                  title: "Missing file"
                  state: "REJECTED"
                  state_description: "there are some files missing"
                  date: "2018-01-12T10:40:52Z"

                - id: "5befec97-1e57-4210-b7b6-57a604aaef47"
                  title: "Old Dataset"
                  state: "ARCHIVED"
                  state_description: "easy-dataset:id"
                  date: "2017-08-09T10:10:22Z"
      security:
        - BasicAuth: []

    post:
      tags:
      - "deposit"
      summary: "Creates new deposit"
      description: "Creates an empty bag and returns deposit URL."
      operationId: "createDeposit"
      responses:
        201:
          description: "Deposit created successfully."
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: "#/components/schemas/Deposit"
                example:
                  id: "c3155868-1898-493a-8805-53adbd269878"
                  title: "Sample Dataset"
                  state: "DRAFT"
                  state_description: "Deposit is open for further changes."
                  date: "2018-01-01T04:12:34Z"
          headers:
            Location:
              description: "URL of created deposit"
              schema:
                type: "string"
                example:
                  "https://deposit.easy.dans.knaw.nl/deposit/c3155868-1898-493a-8805-53adbd269878"
      security:
        - BasicAuth: []

  /deposit/{id}/metadata:
    get:
      tags:
      - "deposit"
      summary: "Returns the deposit metadata."
      operationId: "getDeposit"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of deposit to retrieve"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Deposit metadata retrieved successfully"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: "#/components/schemas/Metadata"
        # Do we need 403 or is it OK to allow the client to read metadata of a deposit in SUBMITTED state?
        404:
          description: "Not found. The client may derive from this response that the containing deposit does not exist."
        410:
          description: "Gone. The metadata is no longer available, because the deposit has been pruned of the contained bag."
      security:
        - BasicAuth: []

    put:
      tags:
      - "deposit"
      summary: "Updates the deposit metadata."
      operationId: "updateDepositMetadata"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of deposit to be updated"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "Document containing the new metadata"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        204:
          description: "Metadata updated successfully"
        404:
          description: "Not found. The client may derive from this response that the containing deposit does not exist."
        400:
          description: "Bad request. The metadata document was malformed."
      security:
        - BasicAuth: []

  /deposit/{id}/state:
    parameters:
      - name: "id"
        in: "path"
        description: "id of the deposit whose state is to be updated"
        required: true
        schema:
          type: "string"
          format: "uuid"
    get:
      tags:
      - "deposit"
      summary: "Returns the current state of the deposit."
      operationId: "getDepositState"
      responses:
        200:
          description: "Successfully returned deposit state."
          content:
            application/json:
              # NOTE (JvM): There seems to be no way of factoring out the State schema separate from the
              # examples, so that you can have a different example for the get and put operations.examples:
              # That is why I am opting for copy-pasting the schema.
              schema:
                type: object
                properties:
                  state:
                    type: string
                  state_description:
                    type: string
                example:
                  state: "DRAFT"
                  state_description: "Deposit is open for modifications."

    put:
      tags:
      - "deposit"
      summary: "Updates the state of the deposit."
      description: |
        The client is only allowed to update the deposit from DRAFT to SUBMITTED or
        from REJECTED to DRAFT. Other state transitions will be effected by back-end processes.
      operationId: "updateDepositState"
      requestBody:
        description: "the state to set"
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                state_description:
                  type: string
              example:
                state: "SUBMITTED"
                state_description: "Deposit is ready for ingest processing."

      responses:
        204:
          description: "Successfully updated the deposit state."
        404:
          description: "Not found. The client may derive from this response that the containing deposit does not exist."
        400:
          description: "Bad request. The state document was malformed."
      security:
        - BasicAuth: []

  /deposit/{id}:
    delete:
      tags:
      - "deposit"
      summary: "Deletes the deposit."
      operationId: "deleteDeposit"
      parameters:
        - name: "id"
          in: "path"
          description: "id of deposit to be deleted"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        204:
          description: "Deposit deleted successfully."
        403:
          description: |
            Forbidden. The deposit cannot be deleted at this point. Deletions is only permitted when
            the deposit is in one of states: DRAFT, ARCHIVED, REJECTED.
        404:
          description: "Deposit with this id is not found."
      security:
        - BasicAuth: []

  /deposit/{id}/file:
    get:
      tags:
      - "file"
      summary: "Lists all files of the deposit."
      operationId: "getFilesOfDeposit"
      parameters:
        - name: "id"
          in: "path"
          description: "id of deposit"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "List of all files of deposit retrieved successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: string
                example:
                - "/animals/fotos/cat.png"
                - "/animals/fotos/dog.png"
        404:
          description: "Not found. The client may derive from this response that the containing deposit does not exist."
      security:
        - BasicAuth: []

    post:
      tags:
      - "file"
      summary: "Adds a file to the deposit."
      operationId: "depositFile"
      parameters:
        - name: "id"
          in: "path"
          description: "id of deposit where file is uploaded"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "File upload"
        required: true
        content:
          application/octet-stream:
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        201:
          description: "File is uploaded successfully."
          headers:
            Location:
              description: "URL of uploaded file"
              schema:
                type: "string"
                example:
                  "/file/{file_path}"
        401:
          description: "You are not authorized to use this API. Please provide a valid user name and password before trying to use an API."
        500:
          description: "Internal Server Error"
      security:
        - BasicAuth: []

  /deposit/{id}/file/{file_path}:
    put:
      tags:
      - "file"
      summary: "Upload individual file to deposit"
      description: "Upload file specified by {file_path} to deposit given by id.

        \nThe file is specified by its full path, not by its id."
      operationId: "uploadFileToDeposit"
      parameters:
        - name: "id"
          in: "path"
          description: "id of deposit"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "file_path"
          in: "path"
          description: "full path of file to be uploaded to deposit"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        description: "File upload"
        required: true
        content:
          application/octet-stream:
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        201:
          description: "File is uploaded successfully"
          headers:
            Location:
              description: "URL of uploaded file"
              schema:
                type: "string"
                example:
                  "/file/{file_path}"
        401:
          description: "You are not authorized to use this API. Please provide a valid user name and password before trying to use an API."
        500:
          description: "Internal Server Error"
      security:
        - BasicAuth: []

    delete:
      tags:
      - "file"
      summary: "Delete a file from deposit"
      description: "Deletes a deposit specified by ID"
      operationId: "deleteFileFromDeposit"
      parameters:
        - name: "id"
          in: "path"
          description: "id of deposit"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "file_path"
          in: "path"
          description: "full path of file to be deleted from deposit"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "File not found"
      security:
        - BasicAuth: []

components:

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:

    Deposit:
      type: "object"
      required:
      - "id"
      - "title"
      properties:
        id:
          type: "string"
          format: "uuid"
        title:
          type: "string"
        state:
          type: "string"
        state_description:
          type: "string"
        date:
          type: "string"
          format: "date-time"
          description: "Deposit date"
      xml:
        name: "Deposit"

    SchemeAndID:
      type: "object"
      properties:
        scheme:
          type: "string"
          description: "Scheme ..."
          enum:
            - "approved"
            - "pending"
            - "closed"
            - "new"
          example: "approved"
        id:
          type: "integer"
          format: "int64"
          example: 39

    Administrator:
      type: "object"
      required:
      - "initials"
      - "surname"
      properties:
        schemeAndID:
          type: "array"
          xml:
            name: "schemeAndID"
            wrapped: true
          items:
            $ref: "#/components/schemas/SchemeAndID"
          example:
            - scheme: "aproved"
              id: 5
            - scheme: "pending"
              id: 77
        academicTitles:
          type: "string"
          example: "MSc"
        initials:
          type: "string"
          example: "M"
        prefix:
          type: "string"
          example: "prexix"
        surname:
          type: "string"
          example: "van Bergen"
        role:
          type: "string"
          enum:
            - "moderator"
            - "aviator"
            - "incubator"
            - "inhalator"
          example: "inhalator"
        organization:
          type: "string"
          example: "Radboud Universiteit"

    Relation:
      type: "object"
      properties:
        qualifier:
          type: "string"
          description: "Qualifier ..."
          enum:
            - "relative"
            - "absolute"
            - "unrelated"
            - "redundant"
          example: "relative"
        title:
          type: "string"
          example: "Relation Title"
        url:
          type: "string"
          example: "Relation URL"
        emphasize_this_relation:
          type: "boolean"
          default: true
          example: "false"

    LanguageISO639:
      type: "object"
      properties:
        language:
          type: "string"
          description: "Language ..."
          enum:
            - "Dutch"
            - "English"
            - "German"
            - "Spanish"
          example: "Dutch"

    SchemeAndDate:
      type: "object"
      properties:
        scheme:
          type: "string"
          description: "Scheme ..."
          enum:
            - "approved"
            - "pending"
            - "closed"
            - "new"
          example: "closed"
        date:
          type: "string"
          example: "1999-01-19T10:00:37.824Z"

    License:
      type: "object"
      required:
      - "accessRightsOpenAccess"
      - "accessRightsRegisteredUsers"
      - "accessRightsRestrictedGroup"
      - "accessRightsRestrictedReqPermission"
      - "accessRightsOtherAccess"
      - "licence"
      properties:
        rightsHolder:
          type: "array"
          xml:
            name: "rightsHolder"
            wrapped: true
          items:
            type: "string"
          example:
            - rightsHolder: "rights holder 1"
            - rightsHolder: "rights holder 2"
            - rightsHolder: "rights holder 3"
        publisher:
          type: "array"
          xml:
            name: "publisher"
            wrapped: true
          items:
            type: "string"
          example:
            - publisher: "publisher 1"
            - publisher: "publisher 2"
        accessRightsOpenAccess:
          type: "boolean"
          default: true
          example: true
        accessRightsRegisteredUsers:
          type: "boolean"
          default: false
          example: true
        accessRightsRestrictedGroup:
          type: "boolean"
          default: false
          example: false
        selectRestrictedGroup:
          type: "string"
          description: "Select Restricted Group ..."
          enum:
            - "Restricted Group 1"
            - "Restricted Group 2"
            - "Restricted Group 3"
            - "Restricted Group 4"
          example: "Restricted Group 4"
        accessRightsRestrictedReqPermission:
          type: "boolean"
          default: false
          example: true
        accessRightsOtherAccess:
          type: "boolean"
          default: false
          example: true
        license:
          type: "string"
          description: "License ..."
          enum:
            - "License 1"
            - "License 2"
            - "License 3"
            - "License 4"
          example: "License 2"
        dateAvailable:
          type: "string"
          format: "date-time"
          example: "2018-02-19T16:39:35.948Z"

    TypeDCMI:
      type: "object"
      properties:
        typeDCMI:
          type: "string"
          description: "Type (DCMI resource type)"
          enum:
            - "typeDCMI 1"
            - "typeDCMI 2"
            - "typeDCMI 3"
            - "typeDCMI 4"
          example: "typeDCMI 2"

    FormatIMT:
      type: "object"
      properties:
        formatIMT:
          type: "string"
          description: "Format (internet media type)"
          enum:
            - "Format 1"
            - "Format 2"
            - "Format 3"
            - "Format 4"
          example: "Format 2"

    UploadType:
      type: "object"
      properties:
        typeDCMI:
          type: "array"
          xml:
            name: "typeDCMI"
            wrapped: true
          items:
            $ref: "#/components/schemas/TypeDCMI"
          example:
            - typeDCMI: "typeDCMI 1"
            - typeDCMI: "typeDCMI 2"
            - typeDCMI: "typeDCMI 3"
        type:
          type: "array"
          xml:
            name: "type"
            wrapped: true
          items:
            type: "string"
          example:
            - typeob: "type 1"
            - typeob: "type 2"
        formatIMT:
          type: "array"
          xml:
            name: "formatIMT"
            wrapped: true
          items:
            $ref: "#/components/schemas/FormatIMT"
          example:
            - formatIMT: "formatIMT 1"
            - formatIMT: "formatIMT 2"
            - formatIMT: "formatIMT 3"
        uploadFormat:
          type: "array"
          xml:
            name: "format"
            wrapped: true
          items:
            type: "string"
          example:
            - uploadFormat: "uploadFormat 1"
            - uploadFormat: "uploadFormat 2"
            - uploadFormat: "uploadFormat 3"
            - uploadFormat: "uploadFormat 4"

    ArchisZaakidentificatie:
      type: "object"
      properties:
        zaakidentificatie:
          type: "array"
          xml:
            name: "archisZaakidentificatie"
            wrapped: true
          items:
            type: "string"

    SubjectABRcomplex:
      type: "object"
      properties:
        subjectABRcomplex:
          type: "string"
          description: "Subject ABR complex"
          enum:
            - "SubjectABR 1"
            - "SubjectABR 2"
            - "SubjectABR 3"
          example: "SubjectABR 1"

    TemporalCoverage:
      type: "object"
      properties:
        temporalCoverage:
          type: "string"
          description: "Temporal coverage (ABR period)"
          enum:
            - "TemporalCoverage 1"
            - "TemporalCoverage 2"
            - "TemporalCoverage 3"
          example: "TemporalCoverage 3"

    ArchaeologyMetadata:
      type: "object"
      properties:
  # TODO to elaborate on importPakbon if it will be decided that this functionality is needed
  # How to describe with Swagger the "Upload" button?
  #      importPakbon:
  #        type: "string"
        archisZaakidentificatie:
          type: "array"
          xml:
            name: "archisZaakidentificatie"
            wrapped: true
          items:
            $ref: "#/components/schemas/ArchisZaakidentificatie"
          example:
            - zaakidentificatie: "Archis Zaakidentificatie 1"
            - zaakidentificatie: "Archis Zaakidentificatie 2"
            - zaakidentificatie: "Archis Zaakidentificatie 3"
        subjectABRcomplex:
          type: "array"
          xml:
            name: "subjectABRcomplex"
            wrapped: true
          items:
            $ref: "#/components/schemas/SubjectABRcomplex"
          example:
            - subjectABRcomplex: "SubjectABR 1"
            - subjectABRcomplex: "SubjectABR 2"
            - subjectABRcomplex: "SubjectABR 3"
        temporalCoverage:
          type: "array"
          xml:
            name: "temporalCoverage"
            wrapped: true
          items:
            $ref: "#/components/schemas/TemporalCoverage"
          example:
            - temporalCoverage: "TemporalCoverage 1"
            - temporalCoverage: "TemporalCoverage 2"
            - temporalCoverage: "TemporalCoverage 33"
      xml:
        name: "ArchaeologyMetadata"

    LanguageAndLiteratureMetadata:
      type: "object"
      properties:
        absentCLARINmetadata:
          type: "boolean"
          default: true
          example: false
        presentCLARINmetadata:
          type: "boolean"
          default: false
          example: true

    SpatialPoint:
      type: "object"
      properties:
        schemeSpatialPoint:
          type: "array"
          items:
            type: "string"
            enum:
              - "Scheme Spatial Point 1"
              - "Scheme Spatial Point 2"
              - "Scheme Spatial Point 3"
            example: "Scheme Spatial Point 3"
        xCoordinate:
          type: "string"
          example: "132"
        yCoordinate:
          type: "string"
          example: "643"

    SpatialBox:
      type: "object"
      properties:
        schemeSpatialBox:
          type: "array"
          items:
            type: "string"
            enum:
              - "Scheme Spatial Box 1"
              - "Scheme Spatial Box 2"
              - "Scheme Spatial Box 3"
            example: "Scheme Spatial Box 3"
        north:
          type: "string"
          example: "north 1"
        east:
          type: "string"
          example: "east 1"
        south:
          type: "string"
          example: "south 1"
        west:
          type: "string"
          example: "west 1"

    TimeAndSpacialMetadata:
      type: "object"
      properties:
        temporalCoverage:
          type: "array"
          xml:
            name: "temporalCoverage"
            wrapped: true
          items:
            type: "string"
          example:
            - temporalCoverage: "temporalCoverage 1"
            - temporalCoverage: "temporalCoverage 2"
            - temporalCoverage: "temporalCoverage 3"
            - temporalCoverage: "temporalCoverage 4"
        spatialPoint:
          type: "array"
          xml:
            name: "relation"
            wrapped: true
          items:
            $ref: "#/components/schemas/SpatialPoint"
          example:
            - schemeSpatialPoint: "Scheme Spatial Point 1"
              xCoordinate: "44"
              yCoordinate: "12"
            - schemeSpatialPoint: "Scheme Spatial Point 2"
              xCoordinate: "8"
              yCoordinate: "233"
            - schemeSpatialPoint: "Scheme Spatial Point 3"
              xCoordinate: "9888"
              yCoordinate: "7"
        spatialBox:
          type: "array"
          xml:
            name: "relation"
            wrapped: true
          items:
            $ref: "#/components/schemas/SpatialBox"
          example:
            - schemeSpatialBox: "Scheme Spatial Box 2"
              north: "north 44"
              east: "east 12"
              south: "south 44"
              west: "west 12"
            - schemeSpatialBox: "Scheme Spatial Box 3333"
              north: "north 333"
              east: "east 222"
              south: "south 999"
              west: "west 555"
        spatialCoverage:
          type: "array"
          xml:
            name: "spatialCoverage"
            wrapped: true
          items:
            type: "string"
          example:
            - spatialCoverage: "Spatial coverage 1"
            - spatialCoverage: "Spatial coverage 2"
            - spatialCoverage: "Spatial coverage 3"

    State:
      type: "object"
      properties:
        state:
          type: "string"
        state_description:
          type: "string"

    Metadata:
      type: "object"
      required:
      - "doi"
      - "title"
      - "creator"
      - "dateCreated"
      - "audience"
      - "privacySensitiveDataYes"
      - "privacySensitiveDataNo"
      - "license"
      properties:
        doi:
          type: "string"
          example: "doi:10.17632/DANS.6wg5xccnjd.1"
        title:
          type: "array"
          xml:
            name: "title"
            wrapped: true
          items:
            type: "string"
          example:
            - "Do Androids Dream of Electric Sheep?"
            - "The Hitchhiker's Guide to the Galaxy"
        alternativeTitle:
          type: "array"
          xml:
            name: "alternativeTitle"
            wrapped: true
          items:
            type: "string"
          example:
            - "Do Electric Sheep Dream of Androids?"
            - "The Hitchhiker's Guide to the Universe"
        description:
          type: "string"
          example: "Seconds before the Earth is demolished to make way for a galactic freeway, Arthur Dent is plucked off the planet by his friend Ford Prefect, a researcher for the revised edition of The Hitchhiker's Guide to the Galaxy who, for the last fifteen years, has been posing as an out-of-work actor.

                    Together this dynamic pair begin a journey through space aided by quotes from The Hitchhiker's Guide (\"A towel is about the most massively useful thing an interstellar hitchhiker can have\") and a galaxy-full of fellow travelers: Zaphod Beeblebrox—the two-headed, three-armed ex-hippie and totally out-to-lunch president of the galaxy; Trillian, Zaphod's girlfriend (formally Tricia McMillan), whom Arthur tried to pick up at a cocktail party once upon a time zone; Marvin, a paranoid, brilliant, and chronically depressed robot; Veet Voojagig, a former graduate student who is obsessed with the disappearance of all the ballpoint pens he bought over the years."
        creator:
          type: "array"
          xml:
            name: "creator"
            wrapped: true
          items:
            $ref: "#/components/schemas/Administrator"
          example:
            schemeAndID:
            - scheme: "pending"
              id: 16
            - scheme: "aproved"
              id: 4
            academicTitles: "MSc"
            initials: "M"
            prefix: "some prefix"
            surname: "van Bergen"
            role: "inhalator"
            organization: "Radboud Universiteit"
        contributor:
          type: "array"
          xml:
            name: "contributor"
            wrapped: true
          items:
            $ref: "#/components/schemas/Administrator"
          example:
            schemeAndID:
            - scheme: "closed"
              id: 777
            - scheme: "pending"
              id: 3333
            academicTitles: "PhD"
            initials: "A"
            prefix: "some another prefix"
            surname: "van Doorn"
            role: "contributor"
            organization: "Leiden Universiteit"
        dateCreated:
          type: "string"
          format: "date-time"
          example: "2018-02-19T12:00:37.824Z"
        audience:
          type: "array"
          xml:
            name: "audience"
            wrapped: true
          items:
            type: "string"
          example:
            - "small audience"
            - "strange audience"
        subject:
          type: "array"
          xml:
            name: "subject"
            wrapped: true
          items:
            type: "string"
          example:
            - "science fiction"
            - "physics"
            - "chemistry"
        identifier:
          type: "array"
          xml:
            name: "identifier"
            wrapped: true
          items:
            $ref: "#/components/schemas/SchemeAndID"
          example:
            - scheme: "approved"
              id: 234
            - scheme: "pending"
              id: 13
  # TODO how to take "Verify" button into account?
        relation:
          type: "array"
          xml:
            name: "relation"
            wrapped: true
          items:
            $ref: "#/components/schemas/Relation"
          example:
            - qualifier: "absolute"
              title: "Relation First Title"
              url: "http://google.com/text.doc"
              emphasize_this_relation: "true"
            - qualifier: "relative"
              title: "Relation Second Title"
              url: "http://yahoo.com/document.txt"
              emphasize_this_relation: "false"
        languageISO639:
          type: "array"
          xml:
            name: "language"
            wrapped: true
          items:
            $ref: "#/components/schemas/LanguageISO639"
          example:
            - "Dutch"
            - "English"
        language:
          type: "array"
          xml:
            name: "language"
            wrapped: true
          items:
            type: "string"
          example:
            - "English"
            - "German"
            - "French"
        dateISO8601:
          type: "array"
          xml:
            name: "dateISO8601"
            wrapped: true
          items:
            $ref: "#/components/schemas/SchemeAndDate"
          example:
            - "2010-01-19T10:00:37.824Z"
            - "2012-02-19T12:00:37.824Z"
            - "2016-02-19T12:00:37.824Z"
        date:
          type: "array"
          xml:
            name: "date"
            wrapped: true
          items:
            $ref: "#/components/schemas/SchemeAndDate"
          example:
            - scheme: "closed"
              date: "1994-01-19T10:00:37.824Z"
            - scheme: "pending"
              date: "2224-01-19T10:00:37.824Z"
        source:
          type: "string"
          example: "He had expressed an opinion that the true art of memory was not to be gained by technical devices, but by a philosophical apprehension of things; and the cardinal de Berulle, the founder of the Congregation of the Oratory, was so struck by the tone of the remarks as to impress upon the speaker the duty of spending his life in the examination of truth."
        remarks:
          type: "string"
          example: "Alma's encouraging remarks to her son about his superb sandwich making skills gave him a feeling of pride in his efforts. The definition of a remark is a statement about something you noticed. An example of a remark is telling your friend that his garden is really beautiful."
        privacySensitiveDataYes:
          type: "boolean"
          default: false
          example: true
        privacySensitiveDataNo:
          type: "boolean"
          default: false
          example: true
        license:
          $ref: "#/components/schemas/License"
        uploadType:
          $ref: "#/components/schemas/UploadType"
        archaeologyMetadata:
          $ref: "#/components/schemas/ArchaeologyMetadata"
        languageAndLiteratureMetadata:
          $ref: "#/components/schemas/LanguageAndLiteratureMetadata"
        timeAndSpacialMetadata:
          $ref: "#/components/schemas/TimeAndSpacialMetadata"
        licenseAgreement:
          type: "boolean"
          default: false
          example: false

