openapi: 3.0.1

servers:
  - description: Debug environment
    url: http://localhost:20190/
  - description: Local Vagrant machine
    url: http://test.dans.knaw.nl
info:
  description: Public interface for depositing datasets in EASY.
  version: 1.0.0
  title: Deposit API
  contact:
    email: info@dans.knaw.nl
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: service
  description: Information about service status
- name: authentication
  description: Authentication of a user
- name: deposit
  description: Operations on a deposit
- name: directory
  description: |
    Operations on a directory.

    * **Note 1:** the form of the routes is the same as for regular files, but the allowed methods are
    **not** the same.

    * **Note 2:** Swagger insists that `dir_path` cannot be optional. However, the directory operations
    are also valid for the root directory of the deposit, i.e. with `dir_path` empty.
- name: file
  description: |
    Operations on a regular file. Note that the form of the routes is the same as
    for directories, but the allowed methods are **not** the same.

paths:

  /:
    get:
      tags:
      - service
      summary: Returns a description of the service.
      responses:
        200:
          description: description of the service
          content:
            text/plain:
              schema:
                type: string
                description: a plain text, human readable description of the service
                example: |
                  EASY Deposit API Service running (v1.0.0)
        500:
          description: Service is unavailable because of an error.

  /auth/login:
    post:
      tags:
      - authentication
      summary: Sets a JSON web token cookie for authenticating subsequent calls to the service.
      responses:
        204:
          description: No content.
          headers:
            Set-Cookie:
              description: a cookie called `scentry.auth.default.user` containing the JWT
              schema:
                type: string
                format: JWT
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BasicAuth: []

  /auth/logout:
    post:
      tags:
      - authentication
      summary: Removes the JSON web token cookie from the client.
      responses:
        204:
          description: No content.
          headers:
            Set-Cookie:
              description: a cookie called `scentry.auth.default.user` set to the empty string
              schema:
                type: string
      security:
      - BearerAuth: []

  /user:
    get:
      tags:
      - user
      summary: Retrieves user info object of the authenticated user.
      responses:
        200:
          description: single user info object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /deposit:
    get:
      tags:
      - deposit
      summary: Lists all deposits of the authenticated user.
      operationId: listDeposits
      responses:
        200:
          description: list of deposit info objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DepositInfo"
                example:
                # Unfortunately, the example value also gets displayed in the
                # model in Swagger Editor. It is grayed-out, so I guess we can
                # live with that.
                - id: "93674123-1699-49c5-af91-ed31db19adc9"
                  title: My draft deposit
                  state: DRAFT
                  stateDescription: Deposit is open for modification.
                  date: "2018-01-20T10:40:52Z"
                - id: "a145a1be-5463-4b10-a621-a9e511ff7f20"
                  title: "My submitted deposit 1"
                  state: IN_PROGRESS
                  stateDescription: Deposit is being processed.
                  date: "2017-12-01T11:10:22Z"
                - id: "1d946f5b-e53b-4f71-b1f3-7481475d07db"
                  title: "My submitted deposit 2"
                  state: REJECTED
                  stateDescription: Some files are missing
                  date: "2018-01-12T10:40:52Z"
                - id: "5befec97-1e57-4210-b7b6-57a604aaef47"
                  title: "My submitted deposit 2"
                  state: ARCHIVED
                  stateDescription: |
                    Deposit was successfully archived at
                    https://easy.dans.knaw.nl/datasets/id/easy-dataset:12345
                  date: "2017-08-09T10:10:22Z"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    post:
      tags:
      - deposit
      summary: Creates new, empty deposit.
      operationId: createDeposit
      responses:
        201:
          description: Deposit created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepositInfo"
          headers:
            Location:
              description: URL of the newly created deposit
              schema:
                type: string
                example:
                  "https://deposit.easy.dans.knaw.nl/deposit/c3155868-1898-493a-8805-53adbd269878"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/metadata:
    description: |
      The dataset metadata is the Dublin Core based metadata for the dataset that is being deposited.
    get:
      tags:
      - deposit
      summary: Returns the dataset metadata for this deposit.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      operationId: getDatasetMetadata
      responses:
        200:
          description: dataset metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetadata"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        410:
          $ref: "#/components/responses/Gone"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    put:
      tags:
      - deposit
      # Defining parameters for a whole route at once does not seem to be supported well
      # by Swagger Editor. After opening and closing some route/method blocks, the parameters
      # disappear. Defining them per route/method seems more robust, so far.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Writes the dataset metadata for this deposit.
      description: The operation overwrites the existing metadata.
      operationId: writeDatasetMetadata
      requestBody:
        description: JSON document containing the new metadata
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetMetadata'
      responses:
        204:
          description: Dataset metadata written successfully.
        400:
          $ref: "#/components/responses/MalformedMetadata"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/doi:
    description: |
      The reserved Digital Object Identifier for this deposit.
    get:
      tags:
      - deposit
      parameters:
      - $ref: "#/components/parameters/DepositId"
      responses:
        200:
          description: valid DOI minted by DANS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doi"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /deposit/{id}/state:
    get:
      tags:
      - "deposit"
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Returns the current state of the deposit.
      operationId: getDepositState
      responses:
        200:
          description: deposit state, one of DRAFT, SUBMITTED, IN_PROGRESS, REJECTED or ARCHIVED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    put:
      tags:
      - deposit
      summary: Updates the state of the deposit.
      description: |
        The client is only allowed to update the deposit from DRAFT to SUBMITTED or
        from REJECTED to DRAFT. Other state transitions will be effected by back-end processes.
        In order to submit, the deposit needs to be valid. In particular, the json metadata MUST be
        valid, with all mandatory fields specified, among which the Digital Object Identifier (DOI).
      parameters:
      - $ref: "#/components/parameters/DepositId"
      operationId: updateDepositState
      requestBody:
        description: the state to set
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/State"

      responses:
        204:
          description: Successfully updated the deposit state.
        400.1:
          $ref: "#/components/responses/MalformedState"
        400.2:
          $ref: "#/components/responses/MalformedMetadata"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenStateTransition"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}:
    delete:
      tags:
      - deposit
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Deletes the deposit.
      description: |
        This deletes the deposit (**not** any dataset that may have been created from this deposit).
      operationId: deleteDeposit
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenDelete"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/file/{dir_path}:
    get:
      tags:
      - directory
      summary: Returns the file info list for this directory, recursively.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      responses:
        200:
          description: list of file infos for the directory and its subdirectories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileInfo"
                example:
                  - filename: myfile.txt
                    dirpath: path/to/parent/dir
                    sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5c
                  - filename: myfile2.txt
                    dirpath: path/to/parent/dir
                    sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5d

        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    post:
      tags:
      - directory
      summary: Adds one or more files.
      description: |
        The `Content-Type` must always be `multipart/form-data`, which means the body is formatted using the
        [multipart media type](https://tools.ietf.org/html/rfc2046.html#section-5.1); each part contains one file.
        The header area of each part specifies the file name using a `Content-Disposition` header.

        If the body contains **only one part** and that part has `Content-Type: application/zip`, then the body
        is a file in ZIP format. This ZIP file can contain a directory hierarchy. The ZIP file will be
        unzipped in `dir_path`. For each file in the ZIP file, the path in the deposit will be `dir_path`/`path_in_zip`.

        In all other cases the files are all stored in the directory pointed to by `dir_path` and **it is not
        allowed** to include any files with `Content-Type: application/zip`. Note, that this means that only a flat
        list of files can be sent this way, i.e. not including any directory hierarchy.

        Concurrent POST calls to the same deposit are not allowed. The result of concurrent PUT and POST calls is
        undefined.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: file or subdirectory added
        400.1:
          $ref: "#/components/responses/MalformedZip"
        400.2:
          $ref: "#/components/responses/MustBeMultipartFormdata"
        400.3:
          $ref: "#/components/responses/ZipMustBeOnlyFile"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409.1:
          $ref: "#/components/responses/ConflictOverwritesFilesOnServer"
        409.2:
          $ref: "#/components/responses/ConflictConcurrentPostNotAllowed"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    delete:
      tags:
      - directory
      summary: Removes the directory and all files in it, recursively.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/file/{file_path}:
    get:
      tags:
      - file
      summary: Returns information about one file in the deposit.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/FilePath"
      responses:
        200:
          description: file info object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"

        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    put:
      tags:
      - file
      summary: Adds or overwrites the specified file in the deposit.
      parameters:
       - $ref: "#/components/parameters/DepositId"
       - $ref: "#/components/parameters/FilePath"
      description: |
        If any of `file_path`'s parent do not yet exist, they are first created. The Content-Type may
        be anything except `application/zip`.
      operationId: writeFile
      requestBody:
        description: file data
        required: true
        content:
          '*/*':
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        201:
          description: Created new file.
          headers:
            Location:
              description: URL of new file
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        204:
          description: Updated existing file.
        400:
          $ref: "#/components/responses/ZipFileNotAllowed"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    delete:
      tags:
      - file
      summary: Deletes a file from deposit.
      parameters:
       - $ref: "#/components/parameters/DepositId"
       - $ref: "#/components/parameters/FilePath"
      operationId: deleteFile
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenDelete"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

components:

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:

    AuthorizationBasicHeader:
      name: Authorization
      description: base64 encoded user name and password
      in: header
      required: true
      schema:
        type: string

    DepositId:
      name: id
      in: path
      description: deposit identifier
      required: true
      schema:
        type: string
        format: uuid

    FilePath:
      name: file_path
      in: path
      description: path in the deposit
      required: true
      schema:
        type: string

    DirPath:
      name: dir_path
      in: path
      description: path in the deposit
      required: true
      schema:
        type: string

    ContentDisposition:
      name: "Content-Disposition"
      in: header
      description: |
        Used to specify the `filename` of a message part. The first parameter is always `form-data`.
        Additional parameters are case-insensitive and have arguments that use quoted-string syntax
        after the '=' sign.Multiple parameters are separated by a semi-colon (';').
      example:
        '`Content-Disposition: form-data; filename="myfile.txt"`'
      required: true
      schema:
        type: "string"

  responses:

    DeleteOk:
      description: Resource deleted.

    Unauthorized:
      description: Unauthorized.

    ForbiddenDelete:
      description: |
        Forbidden. The resource cannot be deleted at this point. (Deletion is only permitted when the deposit is in one of states: DRAFT, ARCHIVED, REJECTED.)

    ForbiddenStateTransition:
      description: |
        Forbidden. Illegal state transition. (Only allowed to transition from DRAFT to SUBMITTED and from REJECTED to DRAFT.)

    NotFound:
      description: Not found. The body specifies if the deposit or something in the deposit is not found.

    ZipMustBeOnlyFile:
      description: Bad request. A multipart/form-data message contained a ZIP part but also other parts.

    ConflictOverwritesFilesOnServer:
      description: Conflict. The following file(s) already exist on the server

    ConflictConcurrentPostNotAllowed:
      description: Conflict. Concurrent POSTs to the same deposit are not allowed.

    Gone:
      description: |
        Gone. The metadata is no longer available, because the deposit has been fully processed.

    InternalServerError:
      description: Internal Server Error.

    MalformedMetadata:
      description: Bad request. The metadata document is not valid JSON or contains fields not defined in the metadata model.

    MalformedState:
      description: Bad request. State document is malformed.

    MalformedZip:
      description: Bad request. ZIP file is malformed.

    MustBeMultipartFormdata:
      description: Bad Request. The request body must be multipart/form-data.

    ZipFileNotAllowed:
      description: Bad request. Content-Type must not be application/zip.

  schemas:

    UserInfo:
      type: object
      required:
        - username
        - lastName
      example:
        username: "user001"
        firstName: "First"
        prefix: "van"
        lastName: "Namen"
        groups: [ "group001", "group002"]
      properties:
        username:
          type: "string"
        firstName:
          type: "string"
          description: "(optional)"
        prefix:
          type: "string"
          description: "insertions, called 'tussenvoegsels' in Dutch"
        lastName:
          type: "string"
        groups:
          type: array
          items:
            type: string
          description: "string array with group-names this user belongs to"

    Doi:
      type: object
      properties:
        doi:
          type: "string"

    # TODO: add links to state, metadata, files?
    DepositInfo:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        title:
          type: "string"
        state:
          type: "string"
        stateDescription:
          type: "string"
        date:
          type: "string"
          format: "date-time"
          description: "Deposit date"
      example:
          id: "1d946f5b-e53b-4f71-b1f3-7481475d07db"
          title: My draft deposit
          state: DRAFT
          stateDescription: Deposit is open for modification.
          date: "2018-01-12T10:40:52Z"

    State:
      type: object
      properties:
        state:
          type: string
        stateDescription:
          type: string
      example:
        state: DRAFT
        stateDescription: Deposit is open for modification.

    FileInfo:
      type: object
      properties:
        filename:
          type: string
        dirpath:
          type: string
        sha1sum:
          type: string
      example:
        filename: file.txt
        dirpath: path/to/containing/dir
        sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5c

    DatasetMetadata:
      type: object
      additionalProperties: false
      properties:
        # Basic information
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        languageOfDescription:
          $ref: "#/components/schemas/SchemedKeyValue"
        titles:
          type: array
          items:
            type: string
          example:
            - "Title 1"
            - "Title 2"
        alternativeTitles:
          $ref: "#/components/schemas/StringArray"
        descriptions:
          $ref: "#/components/schemas/StringArray"
        creators:
          type: array
          items:
            $ref: "#/components/schemas/Author"
        contributors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
        audiences:
          type: array
          items:
            $ref: "#/components/schemas/SchemedKeyValue"
        subjects:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedKeyValue"
        alternativeIdentifiers:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        relations:
          type: array
          items:
            oneOf : [
              {$ref: "#/components/schemas/Relation"},
              {$ref: "#/components/schemas/QualifiedSchemedValue"}
              ]

        languagesOfFiles:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedKeyValue"
        dates:
          type: array
          items:
            $ref: "#/components/schemas/Date"
        sources:
          $ref: "#/components/schemas/StringArray"
        instructionsForReuse:
          $ref: "#/components/schemas/StringArray"

        # Licence and access
        publishers:
          $ref: "#/components/schemas/StringArray"
        accessRights:
          $ref: "#/components/schemas/AccessRights"
        license:
          type: string
          format: url

        # Upload type
        types:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedValue"
        formats:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedValue"

        # Temporal and spatial coverage
        temporalCoverages:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedKeyValue"
        spatialPoints:
          type: array
          items:
            $ref: "#/components/schemas/SpatialPoint"
        spatialBoxes:
          type: array
          items:
            $ref: "#/components/schemas/SpatialBox"
        spatialCoverages:
          type: array
          items:
            $ref: "#/components/schemas/PossiblySchemedKeyValue"

        # For the data manager
        messageForDataManager:
          type: string
        privacySensitiveDataPresent:
          type: string
          enum:
          - yes
          - no
          - unspecified

        acceptDepositAgreement:
          type: boolean

    # Components of DatasetMetadata below

    AccessRights:
      type: object
      required:
      - category
      properties:
        category:
          type: string
          enum:
          - OPEN_ACCESS
          - REQUEST_PERMISSION

    Author:
      type: object
      properties:
        titles:
          type: string
        initials:
          type: string
        insertions:
          type: string
        surname:
          type: string
        role:
          $ref: "#/components/schemas/SchemedKeyValue"
        ids:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        organization:
          type: string
      oneOf:
        - required:
          - surname
          - initials
        - required:
          - organization
      example:
        titles: Prof Dr
        initials: A
        insertions:
        surname: Einstein
        role:
          - scheme: datacite:contributorType
          - key: DataManager
          - value: "Data Manager"
        ids:
          - scheme: DAI
            value: "123456789x"
          - scheme: ISNI
            value: "ISNI:000000012281955X"
        organization: University of Zurich

    Date:
      type: object
      required:
      - value
      - qualifier
      properties:
        scheme:
          type: string
        value:
          type: string
        qualifier:
          type: string
          enum:
          - dcterms:created
          - dcterms:available
          - dcterms:date
          - dcterms:dateAccepted
          - dcterms:dateCopyrighted
          - dcterms:dateSubmitted
          - dcterms:issued
          - dcterms:modified
          - dcterms:valid

    Relation:
      type: object
      required:
      - qualifier
      properties:
        qualifier:
          type: string
          enum:
          - dcterms:hasFormat
          - dcterms:hasPart
          - dcterms:hasVersion
          - dcterms:isFormatOf
          - dcterms:isPartOf
          - dcterms:isReferencedBy
          - dcterms:isReplacedBy
          - dcterms:isRequiredBy
          - dcterms:isVersionOf
          - dcterms:references
          - dcterms:relation
          - dcterms:replaces
          - dcterms:requires
          - dcterms:conformsTo
        url:
          type: string
        title:
          type: string
      oneOf:
        - required:
          - title
        - required:
          - url

    SchemedValue:
      type: object
      required:
      - scheme
      - value
      properties:
        scheme:
          type: string
        value:
          type: string

    PossiblySchemedValue:
      type: object
      required:
      - value
      properties:
        scheme:
         type: string
        value:
         type: string

    QualifiedSchemedValue:
      type: object
      required:
      - scheme
      - value
      - qualifier
      properties:
        scheme:
          type: string
        value:
          type: string
        qualifier:
          type: string

    SchemedKeyValue:
      type: object
      required:
      - scheme
      - key
      - value
      properties:
        scheme:
          type: string
        value:
          type: string
        key:
          type: string

    PossiblySchemedKeyValue:
      type: object
      required:
      - value
      properties:
        scheme:
          type: string
        value:
          type: string
        key:
          type: string

    SpatialBox:
      type: object
      required:
      - scheme
      - north
      - east
      - south
      - west
      properties:
        scheme:
          type: string
        north:
          type: string
          format: "number"
        east:
          type: string
          format: "number"
        south:
          type: string
          format: "number"
        west:
          type: string
          format: "number"

    SpatialPoint:
      type: object
      required:
      - scheme
      - x
      - y
      properties:
        scheme:
          type: string
        x:
          type: string
          format: "number"
        y:
          type: string
          format: "number"

    # Note: it is not possible to provide examples in combination with a reference to this
    # schema. If you need examples, you'll have to spell out the complete type.
    StringArray:
      type: array
      items:
        type: string
