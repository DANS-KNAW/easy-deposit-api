openapi: 3.0.1

servers:
  - description: Debug environment
    url: http://localhost:20190/
  - description: Local Vagrant machine
    url: http://test.dans.knaw.nl
info:
  description: Public interface for depositing datasets in EASY.
  version: 1.0.0
  title: Deposit API
  contact:
    email: info@dans.knaw.nl
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: service
  description: Information about service status
- name: authentication
  description: Authentication of a user
- name: deposit
  description: Operations on a deposit
- name: directory
  description: |
    Operations on a directory.

    * **Note 1:** the form of the routes is the same as for regular files, but the allowed methods are
    **not** the same.

    * **Note 2:** Swagger insists that `dir_path` cannot be optional. However, the directory operations
    are also valid for the root directory of the deposit, i.e. with `dir_path` empty.
- name: file
  description: |
    Operations on a regular file. Note that the form of the routes is the same as
    for directories, but the allowed methods are **not** the same.

paths:

  /:
    get:
      tags:
      - service
      summary: Returns a description of the service.
      responses:
        200:
          description: description of the service
          content:
            text/plain:
              schema:
                type: string
                description: a plain text, human readable description of the service
                example: |
                  EASY Deposit API Service running (v1.0.0)
        500:
          description: Service is unavailable because of an error.

  /login:
    post:
      tags:
      - authentication
      summary: Sets a JSON web token cookie for authenticating subsequent calls to the service.
      responses:
        204:
          description: No content.
          headers:
            Set-Cookie:
              description: a cookie called `scentry.auth.default.user` containing the JWT
              schema:
                type: string
                format: JWT
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BasicAuth: []

  /logout:
    post:
      tags:
      - authentication
      summary: Removes the JSON web token cookie from the client.
      responses:
        204:
          description: No content.
          headers:
            Set-Cookie:
              description: a cookie called `scentry.auth.default.user` set to the empty string
              schema:
                type: string
      security:
      - BearerAuth: []

  /deposit:
    get:
      tags:
      - deposit
      summary: Lists all deposits of the authenticated user.
      operationId: listDeposits
      responses:
        200:
          description: list of deposit info objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DepositInfo"
                example:
                # Unfortunately, the example value also gets displayed in the
                # model in Swagger Editor. It is grayed-out, so I guess we can
                # live with that.
                - id: "93674123-1699-49c5-af91-ed31db19adc9"
                  title: My draft deposit
                  state: DRAFT
                  state_description: Deposit is open for modification.
                  date: "2018-01-20T10:40:52Z"
                - id: "a145a1be-5463-4b10-a621-a9e511ff7f20"
                  title: "My submitted deposit 1"
                  state: IN_PROGRESS
                  state_description: Deposit is being processed.
                  date: "2017-12-01T11:10:22Z"
                - id: "1d946f5b-e53b-4f71-b1f3-7481475d07db"
                  title: "My submitted deposit 2"
                  state: REJECTED
                  state_description: Some files are missing
                  date: "2018-01-12T10:40:52Z"
                - id: "5befec97-1e57-4210-b7b6-57a604aaef47"
                  title: "My submitted deposit 2"
                  state: ARCHIVED
                  state_description: |
                    Deposit was successfully archived at
                    https://easy.dans.knaw.nl/datasets/id/easy-dataset:12345
                  date: "2017-08-09T10:10:22Z"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    post:
      tags:
      - deposit
      summary: Creates new, empty deposit.
      operationId: createDeposit
      responses:
        201:
          description: Deposit created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepositInfo"
          headers:
            Location:
              description: URL of the newly created deposit
              schema:
                type: string
                example:
                  "https://deposit.easy.dans.knaw.nl/deposit/c3155868-1898-493a-8805-53adbd269878"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/metadata:
    description: |
      The dataset metadata is the Dublin Core based metadata for the dataset that is being deposited.
    get:
      tags:
      - deposit
      summary: Returns the dataset metadata for this deposit.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      operationId: getDatasetMetadata
      responses:
        200:
          description: dataset metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetadata"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFoundContainingDepositDoesNotExist"
        410:
          $ref: "#/components/responses/Gone"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    put:
      tags:
      - deposit
      # Defining parameters for a whole route at once does not seem to be supported well
      # by Swagger Editor. After opening and closing some route/method blocks, the parameters
      # disappear. Defining them per route/method seems more robust, so far.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Writes the dataset metadata for this deposit.
      description: The operation overwrites the existing metadata.
      operationId: writeDatasetMetadata
      requestBody:
        description: JSON document containing the new metadata
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetMetadata'
      responses:
        204:
          description: Dataset metadata written successfully.
        400:
          $ref: "#/components/responses/MalformedMetadata"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFoundContainingDepositDoesNotExist"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/state:
    get:
      tags:
      - "deposit"
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Returns the current state of the deposit.
      operationId: getDepositState
      responses:
        200:
          description: deposit state, one of DRAFT, SUBMITTED, IN_PROGRESS, REJECTED or ARCHIVED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFoundContainingDepositDoesNotExist"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    put:
      tags:
      - deposit
      summary: Updates the state of the deposit.
      description: |
        The client is only allowed to update the deposit from DRAFT to SUBMITTED or
        from REJECTED to DRAFT. Other state transitions will be effected by back-end processes.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      operationId: updateDepositState
      requestBody:
        description: the state to set
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/State"

      responses:
        204:
          description: Successfully updated the deposit state.
        400:
          $ref: "#/components/responses/MalformedState"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenStateTransition"
        404:
          $ref: "#/components/responses/NotFoundContainingDepositDoesNotExist"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}:
    delete:
      tags:
      - deposit
      parameters:
      - $ref: "#/components/parameters/DepositId"
      summary: Deletes the deposit.
      description: |
        This deletes the deposit (**not** any dataset that may have been created from this deposit).
      operationId: deleteDeposit
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenDelete"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/file/{dir_path}:
    get:
      tags:
      - directory
      summary: Returns the file info list for this directory, recursively.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      responses:
        200:
          description: list of file infos for the directory and its subdirectories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileInfo"
                example:
                  - filename: myfile.txt
                    dirpath: path/to/parent/dir
                    sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5c
                  - filename: myfile2.txt
                    dirpath: path/to/parent/dir
                    sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5d

        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFoundContainingDepositDoesNotExist"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    post:
      tags:
      - directory
      summary: Adds a file or a subdirectory.
      description: |
        By default the file in the request body is saved in `dir_path` under the file name provided
        in the `Content-Disposition` header. However, if the request body is sent as a ZIP file, it
        is extracted in `dir_path` and `Content-Disposition` is ignored. If `dir_path`, or any of its
        parents do not exist yet, they are first created.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      - $ref: "#/components/parameters/ContentDisposition"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              # a binary file of any type
              type: string
              format: binary
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: file or subdirectory added
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    delete:
      tags:
      - directory
      summary: Removes the directory and all files in it, recursively.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/DirPath"
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

  /deposit/{id}/file/{file_path}:
    get:
      tags:
      - file
      summary: Returns information about one file in the deposit.
      parameters:
      - $ref: "#/components/parameters/DepositId"
      - $ref: "#/components/parameters/FilePath"
      responses:
        200:
          description: file info object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"

        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []
    put:
      tags:
      - file
      summary: Adds or overwrites the specified file in the deposit.
      description: If any of `file_path`'s parent do not yet exist, they are first created.
      operationId: writeFile
      requestBody:
        description: file data
        required: true
        content:
          '*/*':
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        200:
          description: Updated existing file.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        201:
          description: Created new file.
          headers:
            Location:
              description: URL of new file
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

    delete:
      tags:
      - file
      summary: Deletes a file from deposit.
      operationId: deleteFile
      responses:
        204:
          $ref: "#/components/responses/DeleteOk"
        400:
          description: "Invalid id supplied"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/ForbiddenDelete"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
      security:
      - BearerAuth: []

components:

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:

    AuthorizationBasicHeader:
      name: Authorization
      description: base64 encoded user name and password
      in: header
      required: true
      schema:
        type: string

    DepositId:
      name: id
      in: path
      description: deposit identifier
      required: true
      schema:
        type: string
        format: uuid

    FilePath:
      name: file_path
      in: path
      description: path in the deposit
      required: true
      schema:
        type: string

    DirPath:
      name: dir_path
      in: path
      description: path in the deposit
      required: true
      schema:
        type: string

    ContentDisposition:
      name: "Content-Disposition; filename"
      in: header
      description: the name to use for the new file in the deposit
      required: true
      schema:
        type: "string"

  responses:

    DeleteOk:
      description: Resource deleted.

    Unauthorized:
      description: Unauthorized.

    Forbidden:
      description: Forbidden. Invalid credentials.

    ForbiddenDelete:
      description: |
        Forbidden. Insufficient credentials or  the resource cannot be deleted at this point.
        (Deletion is only permitted when the deposit is in one of states: DRAFT, ARCHIVED, REJECTED.)

    ForbiddenStateTransition:
      description: |
        Forbidden. Insufficient credentials or illegal state transition. (Only allowed to transition from DRAFT to SUBMITTED and from REJECTED to DRAFT.)

    NotFound:
      description: Not found.

    NotFoundContainingDepositDoesNotExist:
      description: |
        Not found. The client may derive from this response that the containing deposit does
        not exist, either.

    Gone:
      description: |
        Gone. The metadata is no longer available, because the deposit has been fully processed.

    InternalServerError:
      description: Internal Server Error.

    MalformedMetadata:
      description: Bad request. The metadata document is malformed.

    MalformedState:
      description: Bad request. State document is malformed.

  schemas:

    # TODO: add links to state, metadata, files?
    DepositInfo:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        title:
          type: "string"
        state:
          type: "string"
        state_description:
          type: "string"
        date:
          type: "string"
          format: "date-time"
          description: "Deposit date"
      example:
          id: "1d946f5b-e53b-4f71-b1f3-7481475d07db"
          title: My draft deposit
          state: DRAFT
          state_description: Deposit is open for modification.
          date: "2018-01-12T10:40:52Z"

    State:
      type: object
      properties:
        state:
          type: string
        state_description:
          type: string
      example:
        state: DRAFT
        state_description: Deposit is open for modifications.

    FileInfo:
      type: object
      properties:
        filename:
          type: string
        dirpath:
          type: string
        sha1sum:
          type: string
      example:
        filename: file.txt
        dirpath: path/to/containing/dir
        sha1sum: ab3aa0555f31a8d7809fae4b03a95195edb01f5c

    DatasetMetadata:
      required:
      - titles
      - languageOfDescription
      - creators
      - dateCreated
      - audiences
      - accessRights
      - license
      - privacySensitiveDataPresent
      - acceptLicenseAgreement
      type: object
      properties:
        # Basic information
        doi:
          type: string
          example: "doi:10.17632/DANS.6wg5xccnjd.1"
        languageOfDescription:
          type: string
        titles:
          type: array
          items:
            type: string
          example:
            - "Title 1"
            - "Title 2"
        alternativeTitles:
          $ref: "#/components/schemas/StringArray"
        descriptions:
          $ref: "#/components/schemas/StringArray"
        creators:
          type: array
          items:
            $ref: "#/components/schemas/Author"
        contributors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
        dateCreated:
          type: string
        audiences:
          $ref: "#/components/schemas/StringArray"
        subjects:
          $ref: "#/components/schemas/StringArray"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        relations:
          type: array
          items:
            $ref: "#/components/schemas/Relation"
        languagesOfFilesIso639:
          $ref: "#/components/schemas/StringArray"
        languagesOfFiles:
          $ref: "#/components/schemas/StringArray"
        datesIso8601:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        dates:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        sources:
          $ref: "#/components/schemas/StringArray"
        instructionsForReuse:
          $ref: "#/components/schemas/StringArray"

        # Licence and access
        rightsHolders:
          $ref: "#/components/schemas/StringArray"
        publishers:
          $ref: "#/components/schemas/StringArray"
        accessRights:
          $ref: "#/components/schemas/AccessRights"
        license:
          type: string
          format: url
        dateAvailable:
          type: string

        # Upload type
        typesDcmi:
          $ref: "#/components/schemas/StringArray"
        types:
          $ref: "#/components/schemas/StringArray"
        formatsMediaType:
          $ref: "#/components/schemas/StringArray"
        formats:
          $ref: "#/components/schemas/StringArray"

        # Archaeology specific metadata
        archisNrs:
          $ref: "#/components/schemas/StringArray"
        subjectsAbrComplex:
          $ref: "#/components/schemas/StringArray"
        temporalCoveragesAbr:
          $ref: "#/components/schemas/StringArray"

        # Language and literature specific metadata
        extraClarinMetadataPresent:
          type: boolean

        # Temporal and spatial coverage
        temporalCoverages:
          $ref: "#/components/schemas/StringArray"
        spatialPoints:
          type: array
          items:
            $ref: "#/components/schemas/SpatialPoint"
        spatialBoxes:
          type: array
          items:
            $ref: "#/components/schemas/SpatialBox"
        spatialCoverageIso3166:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        spatialCoverages:
          $ref: "#/components/schemas/StringArray"

        # For the data manager
        messageForDataManager:
          type: string
        privacySensitiveDataPresent:
          type: string
          enum:
          - yes
          - no
          - unspecified

        acceptLicenseAgreement:
          type: boolean

    # Components of DatasetMetadata below

    AccessRights:
      type: object
      required:
      - category
      properties:
        category:
          type: string
          enum:
          - open
          - open_for_registered_users
          - restricted_group
          - restricted_request
          - other_access
        group:
          type: string

    Author:
      type: object
      properties:
        titles: { type: string }
        initials: { type: string }
        insertions: { type: string }
        surname: { type: string }
        role: { type: string }
        ids:
          type: array
          items:
            $ref: "#/components/schemas/SchemedValue"
        organization: { type: string }
      example:
        titles: Prof Dr
        initials: A
        insertions:
        surname: Einstein
        ids:
          - scheme: DOI
            value: "1234/5678"
          - scheme: ISNI
            value: "ISNI|000000012281955X"
        organization: University of Zurich

    Relation:
      type: object
      properties:
        qualifier:
          type: string
        url:
          type: string
        title:
          type: string

    SchemedValue:
      type: object
      properties:
        scheme: { type: string }
        value: { type: string }

    SpatialBox:
      type: object
      properties:
        scheme:
          type: string
        north:
          type: number
        east:
          type: number
        south:
          type: number
        west:
          type: number

    SpatialPoint:
      type: object
      properties:
        scheme:
          type: string
        x:
          type: number
        y:
          type: number

    # Note: it is not possible to provide examples in combination with a reference to this
    # schema. If you need examples, you'll have to spell out the complete type.
    StringArray:
      type: array
      items:
        type: string
