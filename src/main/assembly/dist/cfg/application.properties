#
# EASY deposit-api configuration file
#
# Please, modify the configuration below to match your environment. Also, delete and/or modify
# this description.

#
# Port that the HTTP-service listens on.
#
daemon.http.port=20190

# https://javaee.github.io/tutorial/servlets011.html
# threshold: 3145728 = 3MB
multipart.location=
multipart.max-file-size=-1
multipart.max-request-size=-1
multipart.file-size-threshold=3145728

#
# Directories for managing the deposits.
#
# - staged:           Sub-directories have two functions:
#                     - staging area for POST uploads and submits.
#                     - optimistic locking of uploads (both POST and PUT) and submits.
#                     A completed draft is copied here when the user submits a deposit.
#                     Multipart files of POST uploads are copied here before
#                     running checks and moving them as payload into a bag.
#                     PUT uploads are directly streamed into a bag, so the corresponding
#                     temporary directory will remain empty, it only serves locking.
# - drafts:           contains the draft deposits; single files are uploaded here directly,
#                     unzipped directories and deposits are moved here from staged.
# - stage-for-submit: the completed draft is copied here when the user submits it.
# - submit-to:        the deposit copy in staged is moved here on successful completion
#                     of a submit request.  As moving is an atomic action this prevents further
#                     processing of incomplete deposits.
#
# N.B. multipart.location, staged, drafts and submit-to must all be located on the same partition
# in order to support atomic moving.
#
# Note that a directory in the staged folder only has temporary content, the service should
# remove it automatically on completion of a request. The error message of a startup failure explains
# what to do with leftovers of a hard shutdown.
#
deposits.staged=/var/opt/dans.knaw.nl/tmp/easy-deposit-api/staged
deposits.drafts=/var/opt/dans.knaw.nl/tmp/easy-deposit-api/drafts
deposits.submit-to=/var/opt/dans.knaw.nl/tmp/easy-ingest-flow-inbox

# The group to assign to the files and directories making up the deposit, before moving it to submit-to.
deposit.permissions.group=deposits

#
# Settings for user authentication. The LDAP directory at ldap-url is used to check the credentials
# of the user by trying to access the entry:
#
# <ldap-user-id-attr-name>=<username>, <ldap-parent-entry>
#
# For example user jdoe wants to connect. With the defaults this will result in easy-deposit-api
# to try and access
#
# uid=jdoe,ou=users,ou=easy,dc=dans,dc=knaw,dc=nl
#
# LDAP should be set up so as to only allow access to users with the correct password.
#
users.ldap-url=ldap://localhost
users.ldap-parent-entry=ou=users,ou=easy,dc=dans,dc=knaw,dc=nl
users.ldap-user-id-attr-name=uid

#
# Settings required to fetch user data when we no longer have the user's password.
#
users.ldap-admin-principal=cn=ldapadmin,dc=dans,dc=knaw,dc=nl
users.ldap-admin-password=changeme

#
# Base URL of the easy-pid-generator service to use for minting DOIs.
#
pids.generator-service=http://localhost:20140/

#
# Lifetime for JSON Web Token cookie (named "scentry.auth.default.user") in seconds.
# (Example: 3600 ( = 60 * 60 = is one hour ).
#
auth.cookie.expiresIn=3600

#
# Symmetric algorithm and secret key to use for JSON Web Token. Algorithm can be any of the values implementing JwtHmacAlgorithm, see fromString in:
#
# https://github.com/pauldijou/jwt-scala/blob/master/core/common/src/main/scala/JwtAlgorithm.scala
#
auth.jwt.hmac.algorithm=HS256
auth.jwt.secret.key=changeMe

# will be extended with "/datasets/id/easy-dataset:NNN" or "/mydatasets"
# depending on presence of "identifier.fedora" in submitted deposit.properties
easy.home=https://deasy.dans.knaw.nl/ui
