### General settings ###

#
# Port that the HTTP-service listens on.
#
daemon.http.port=20190

#
# Directories for managing the deposits. The lifecycle of a deposit is:
#
# 1.   Created in the drafts directory.
# 2.   On submit: copied to stage and then that copy is moved to the submit-to directory.
# 3a)  If archived successfully the bag in the draft-copy is deleted
# 3b)  If the deposit is rejected, the depositor can reopen the draft, modify it and resubmit it.
#
# stage and submit-to must be on a single mount to allow moving
# stage.upload and draft must be on a single mount to allow moving
#
deposits.stage.upload=/var/opt/dans.knaw.nl/tmp/easy-deposit-api/stage-upload
deposits.drafts=/var/opt/dans.knaw.nl/tmp/easy-deposit-api/drafts
deposits.stage=/var/opt/dans.knaw.nl/tmp/easy-deposit-api/stage
deposits.submit-to=/var/opt/dans.knaw.nl/tmp/easy-ingest-flow-inbox

#
# Settings for user authentication. The LDAP directory at ldap-url is used to check the credentials
# of the user by trying to access the entry:
#
# <ldap-user-id-attr-name>=<username>, <ldap-parent-entry>
#
# For example user jdoe wants to connect. With the defaults this will result in easy-deposit-api
# to try and access
#
# uid=jdoe,ou=users,ou=easy,dc=dans,dc=knaw,dc=nl
#
# LDAP should be set up so as to only allow access to users with the correct password.
#
users.ldap-url=ldap://localhost
users.ldap-parent-entry=ou=users,ou=easy,dc=dans,dc=knaw,dc=nl
users.ldap-user-id-attr-name=uid

#
# Settings required to fetch user data when we no longer have the user's password.
#
users.ldap-admin-principal=cn=ldapadmin,dc=dans,dc=knaw,dc=nl
users.ldap-admin-password=changeme

#
# Base URL of the easy-pid-generator service to use for minting DOIs.
#
pids.generator-service=http://localhost:20140/

#
# Lifetime for JSON Web Token cookie (named "scentry.auth.default.user") in seconds.
# (Example: 3600 ( = 60 * 60 = is one hour ).
#
auth.cookie.expiresIn=3600

#
# Symmetric algorithm and secret key to use for JSON Web Token. Algorithm can be any of the values implementing JwtHmacAlgorithm, see fromString in:
#
# https://github.com/pauldijou/jwt-scala/blob/master/core/common/src/main/scala/JwtAlgorithm.scala
#
auth.jwt.hmac.algorithm=HS256
auth.jwt.secret.key=changeMe
